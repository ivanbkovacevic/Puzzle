{"version":3,"sources":["assets/mishuka.jpg","components/Square.js","components/Container.js","components/OriginalImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","klassa","picture","myPicture","console","log","react_default","a","createElement","className","onClick","onSquareClick","class","src","alt","Container","state","puzzle","i","emptySquare","_this","classClicked","Object","toConsumableArray","squareClicked","j","Math","abs","x","y","setState","this","clas","classArr","square","k","concat","push","pop","sort","random","indx","id","_this2","squareMaped","map","sq","Component","OriginalImage","App","handleChange","event","name","target","defineProperty","value","handleSubmit","preventDefault","onSubmit","onChange","type","placeholder","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d1bac42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mishuka.f86089db.jpg\";","import React from 'react';\r\nimport slika from '../assets/mishuka.jpg';\r\n\r\nexport default (props) => {\r\n  let picture=props.myPicture;\r\n  let klassa;\r\n  \r\n  if(picture){\r\n    klassa=\"square show\"\r\n  }else{\r\n    klassa=\"square\"\r\n  }\r\n  console.log(picture);\r\n  return (\r\n            <div className={klassa} onClick={props.onSquareClick}>    \r\n               <img className={props.class} src={picture} alt=''></img>\r\n                </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Container extends Component {\r\n    state={\r\n        puzzle:[],\r\n        myPicture:null\r\n    }\r\n\r\n    componentDidMount() {\r\n      let {puzzle}=this.state;\r\n      puzzle=[...puzzle];\r\n      let classArr=[];\r\n      let square={};\r\n      let clas;\r\n\r\n      for(let i=1; i<4;i++){\r\n        for(let k=1; k<4; k++){\r\n            clas=`square-${i}${k}`;\r\n            classArr.push(clas);\r\n        }}\r\n        classArr.pop();\r\n        classArr.sort(()=>Math.random()-0.5);\r\n        let indx=0;\r\n\r\n      for(let i=1; i<4;i++){\r\n        for(let k=1; k<4; k++){\r\n            square={id:i,x:k,y:i,class:classArr[indx]};\r\n            puzzle.push(square);    \r\n            indx++;\r\n        }\r\n      }\r\n    \r\n      puzzle.pop()\r\n      square={id:9, x:3, y:3, class:'square-empty'};\r\n      puzzle.push(square);\r\n     \r\n      this.setState({puzzle})\r\n    }\r\n\r\n   \r\n    onSquareClick=(i)=>{\r\n        let {puzzle}=this.state;\r\n        puzzle=[...puzzle];\r\n        let classClicked=puzzle[i].class;\r\n        let emptySquare;\r\n        let squareClicked=puzzle[i];\r\n          \r\n          for(let j in puzzle){\r\n            if(puzzle[j].class==='square-empty'){\r\n                emptySquare=puzzle[j];\r\n            if(Math.abs((squareClicked.x - emptySquare.x))===1 && squareClicked.y === emptySquare.y){\r\n                puzzle[i].class=emptySquare.class;\r\n                emptySquare.class=classClicked; \r\n            }\r\n            if(Math.abs((squareClicked.y - emptySquare.y))===1 && squareClicked.x === emptySquare.x){\r\n                puzzle[i].class=emptySquare.class;\r\n                emptySquare.class=classClicked; \r\n            }\r\n        }\r\n           }\r\n          \r\n        console.log(emptySquare)\r\n       \r\n          this.setState({puzzle})\r\n    }\r\n    \r\n    render() {\r\n        console.log(this.state.myPicture)\r\n        let squareMaped=this.state.puzzle.map((sq,i)=>{\r\n            return(\r\n            <Square onSquareClick={()=>this.onSquareClick(i)}\r\n             x={sq.x} y={sq.y} \r\n             class={sq.class}\r\n             myPicture={this.props.myPicture}\r\n            />)\r\n        })\r\n        return (\r\n           <div>  {squareMaped}</div>\r\n              \r\n          \r\n        );\r\n    }\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\n\r\n\r\nexport default (props) => {\r\n  let picture=props.myPicture;\r\n  let klassa;\r\n  \r\n  if(picture){\r\n    klassa=\"original-image show\"\r\n  }else{\r\n    klassa=\"original-image\"\r\n  }\r\n  return (\r\n    <div className=\"img-container\">\r\n          <img className={klassa} src={props.myPicture} alt=''></img>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Container from './components/Container'\r\nimport OriginalImage from './components/OriginalImage'\r\n\r\nclass App extends Component {\r\nstate={\r\n  myPicture:null\r\n}\r\n\r\nhandleChange=(event)=> {\r\n  const name = event.target.name;\r\n this.setState({[name]:event.target.value});\r\n \r\n}\r\n  handleSubmit=(event)=> {\r\n    event.preventDefault();\r\n  \r\n    console.log(this.state.myPicture)\r\n  \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n             <div className=\"my-form\">\r\n                <form  onSubmit={this.handleSubmit}>\r\n                        Paste image URL: <input onChange={this.handleChange} type=\"text\"  \r\n                        placeholder=\"Paste the image URL address\" name=\"myPicture\"></input>\r\n                </form>\r\n                </div>\r\n                <div className=\"app__container\">   \r\n                <Container myPicture={this.state.myPicture}/>\r\n                </div>\r\n          <OriginalImage myPicture={this.state.myPicture}/>     \r\n      </div>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}