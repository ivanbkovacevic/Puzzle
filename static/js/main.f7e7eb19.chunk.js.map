{"version":3,"sources":["assets/SlidingCroped.mp3","kerber.png","components/Square.js","components/Utility.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","klassa","gameStatusCSS","picture","myPicture","gameStatus","gs","move","transition","transform","concat","classMove","x","y","react_default","a","createElement","style","className","classContainer","onClick","onSquareClick","draggable","class","src","alt","PlayAudio","myAudio","play","GameWin","pozContainerArr","classArrTrimed","gameStatusCounter","i","Container","state","puzzle","emptyPoz","emptySquare","_this$state","_this","Object","toConsumableArray","squareClicked","Math","abs","sound","setState","refs","temp","push","console","log","this","clas","clasContainer","classArr","classContainerArr","square","k","pop","sort","random","indx","id","empty","slice","_this2","squareMaped","map","sq","key","ref","audio","Component","App","startImage","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7e7eb19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SlidingCroped.8d3a9594.mp3\";","module.exports = __webpack_public_path__ + \"static/media/kerber.8f980984.png\";","import React from 'react';\r\n\r\nexport default (props) => {\r\n  let picture=props.myPicture;\r\n  let klassa;\r\n  let gameStatus=props.gameStatus;\r\n  let gameStatusCSS;\r\n  \r\n  if(picture){\r\n    klassa=\"square show\"\r\n  }else{\r\n    klassa=\"square\"\r\n  }\r\n\r\n   gameStatusCSS= gameStatus.gs ? 'win' : null;\r\n\r\n  let move = {\r\n    transition:'transform 1s ease',\r\n    transform:`translate(${props.classMove.x}px,${props.classMove.y}px)`,\r\n   };\r\n\r\n  return (\r\n            <div style={move} className={`${props.classContainer} ${klassa} ${gameStatusCSS}`} \r\n                 onClick={props.onSquareClick}> \r\n                \r\n               <img draggable=\"false\" className={props.class} src={picture} alt=''></img>\r\n              \r\n                </div>\r\n  )\r\n}\r\n\r\n\r\n","export function PlayAudio(myAudio) {\r\n    myAudio.play();\r\n  }\r\n\r\n  export function GameWin(pozContainerArr,classArrTrimed) {\r\n \r\n    let gameStatus={\r\n      gameStatusCounter:0,\r\n      gs:false\r\n    };\r\n    for(let i=0;i<9;i++){\r\n       if(pozContainerArr[i]===classArrTrimed[i]){\r\n        gameStatus.gameStatusCounter++;\r\n       }\r\n    }\r\n    gameStatus.gs= gameStatus.gameStatusCounter===9 ? true : false;\r\n   return gameStatus\r\n  }\r\n\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\nimport {PlayAudio,GameWin} from './Utility';\r\nimport audio from \"../assets/SlidingCroped.mp3\";\r\n\r\nclass Container extends Component {\r\n    state={\r\n        puzzle:[],\r\n        myPicture:null,\r\n        emptyPoz:{x:3,y:3},\r\n        gameStatus:{\r\n            gameStatusCounter:0,\r\n            gs:false\r\n        }\r\n          \r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n      let {puzzle}=this.state;\r\n      puzzle=[...puzzle];\r\n      console.log('Willmount')\r\n      let classArr=[];\r\n      let classContainerArr=[];\r\n      let classArrTrimed=[];\r\n    \r\n      let square={};\r\n      let clas;\r\n      let clasContainer;\r\n\r\n      for(let i=1; i<4;i++){\r\n        for(let k=1; k<4; k++){\r\n            clas=`square-${i}${k}`;//creating class for images\r\n            classArr.push(clas);\r\n            clasContainer=`container-square-${i}${k}`;//creating class for container divs images\r\n            classContainerArr.push(clasContainer);\r\n        }}\r\n        classArr.pop();\r\n         classArr.sort(()=>Math.random()-0.5); //shufleing the array of images\r\n     \r\n        let indx=0;\r\n\r\n      for(let i=1; i<4;i++){\r\n        for(let k=1; k<4; k++){\r\n            square={id:indx,x:k,y:i,class:classArr[indx],\r\n            classContainer:classContainerArr[indx],\r\n            classMove:{x:0,y:0},\r\n            empty:{x:k,y:i},\r\n            sound:true\r\n        };\r\n            puzzle.push(square);    \r\n            indx++;\r\n        }\r\n      }\r\n    \r\n      puzzle.pop()\r\n      square={id:8, x:3, y:3, class:'square-empty',\r\n      classContainer:'container-square-empty',\r\n      classMove:{x:0,y:0},\r\n      empty:{x:null,y:null},\r\n      sound:false\r\n    };\r\n      puzzle.push(square);\r\n\r\n      for(let i in puzzle){ // CHECKING IS IT SOLVED\r\n        let temp= puzzle[i].class.slice(7,9);      \r\n      classArrTrimed.push(temp);\r\n    }\r\n    classArrTrimed.pop();\r\n    classArrTrimed.push('33');\r\n\r\n \r\n\r\n      this.setState({puzzle,classArr,classArrTrimed});\r\n    }\r\n\r\n\r\n    onSquareClick=(i)=>{\r\n        let {puzzle,emptyPoz,classArrTrimed}=this.state;\r\n        puzzle=[...puzzle];\r\n     \r\n        classArrTrimed=[...classArrTrimed]\r\n        let emptySquare;\r\n        let squareClicked=puzzle[i];\r\n        let gameStatus;\r\n        \r\n        for(let i in puzzle){\r\n            if(puzzle[i].x===emptyPoz.x && puzzle[i].y===emptyPoz.y ){  \r\n                emptySquare=puzzle[i];//looking for empty square\r\n              \r\n                 \r\n                if(Math.abs((squareClicked.x - emptySquare.x))===1 && squareClicked.y === emptySquare.y){\r\n                //  moving on X axis\r\n             \r\n                    if(emptySquare.x-squareClicked.x===1){//checking is it moving right\r\n                        squareClicked.classMove.x+=133;\r\n                        emptySquare.classMove.x-=133;\r\n                        squareClicked.x++;\r\n                        emptySquare.x--;  \r\n                        emptyPoz.x--;\r\n                        emptySquare.sound=false;   \r\n                        this.setState({puzzle,emptyPoz})         \r\n                     } \r\n                     else if(emptySquare.x-squareClicked.x===-1){//checking is it moving left\r\n                        squareClicked.classMove.x-=133;\r\n                        emptySquare.classMove.x+=133;\r\n                        squareClicked.x--;\r\n                        emptySquare.x++;  \r\n                        emptyPoz.x++; \r\n                        emptySquare.sound=false;   \r\n                        this.setState({puzzle,emptyPoz})             \r\n                     }\r\n                     \r\n                }\r\n                if(Math.abs((squareClicked.y - emptySquare.y))===1 && squareClicked.x === emptySquare.x){\r\n                 //moving on Y axis\r\n                 if(emptySquare.y-squareClicked.y===1){//checking is it moving up\r\n                    squareClicked.classMove.y+=133;\r\n                    emptySquare.classMove.y-=133;\r\n                    squareClicked.y++;\r\n                    emptySquare.y--;  \r\n                    emptyPoz.y--;   \r\n                    emptySquare.sound=false;   \r\n                    this.setState({puzzle,emptyPoz})         \r\n                 } \r\n                 else if(emptySquare.y-squareClicked.y===-1){//checking is it moving down\r\n                    squareClicked.classMove.y-=133;\r\n                    emptySquare.classMove.y+=133;\r\n                    squareClicked.y--;\r\n                    emptySquare.y++;  \r\n                    emptyPoz.y++; \r\n                    emptySquare.sound=false;   \r\n                    this.setState({puzzle,emptyPoz})             \r\n                 }\r\n                }\r\n            } \r\n              \r\n                if(squareClicked.sound){ // play audio when moving\r\n                    let myAudio = this.refs.myAudio;\r\n                    PlayAudio(myAudio);\r\n                }\r\n\r\n                let pozContainerArr=[];\r\n                for(let i in puzzle){\r\n                    let temp= `${puzzle[i].y}${puzzle[i].x}`;\r\n                    pozContainerArr.push(temp);\r\n                }\r\n                gameStatus=GameWin(pozContainerArr,classArrTrimed);//checking is it all solved \r\n                console.log(gameStatus);\r\n                this.setState({puzzle,gameStatus,pozContainerArr,classArrTrimed});\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    \r\n    render() {\r\n   \r\n        let squareMaped=this.state.puzzle.map((sq,i)=>{\r\n            return(\r\n            <Square onSquareClick={()=>this.onSquareClick(i)}\r\n             key={i}\r\n             x={sq.x} y={sq.y} \r\n             class={sq.class}\r\n             classContainer={sq.classContainer}\r\n             classMove={sq.classMove}\r\n             myPicture={this.props.myPicture}\r\n             gameStatus={this.state.gameStatus}\r\n            />)\r\n        })\r\n        return (\r\n            <div className=\"app-container\">   \r\n              {squareMaped}\r\n              <audio ref={\"myAudio\"} src={audio} ></audio>   \r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Container;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Container from './components/Container'\r\nimport { CropImage} from './components/Utility'\r\nimport OriginalImage from './components/OriginalImage'\r\nimport startImage from './kerber.png'\r\n\r\nclass App extends Component {\r\nstate={\r\n  myPicture:startImage\r\n\r\n}\r\n\r\n\r\n// onSelectFile = (e) => {\r\n//   if (e.target.files && e.target.files.length > 0) {\r\n//     const reader = new FileReader();\r\n//     reader.addEventListener('load', () => {\r\n//       this.setState({ myPicture: reader.result });\r\n//     });\r\n//     reader.readAsDataURL(e.target.files[0]);\r\n//   }\r\n// }\r\n\r\n// onSelectURL=(e)=>{\r\n//   console.log(e.target.value)\r\n//   this.setState({myPicture:e.target.value});\r\n// }\r\n\r\n  render() {\r\n   \r\n    return (\r\n      <div className=\"wraper\">\r\n      <div className=\"main-container\">\r\n             {/* <div className=\"my-form\">\r\n             <input type=\"file\" onChange={this.onSelectFile} />\r\n           \r\n              <input onChange={this.onSelectURL} type=\"text\"  \r\n                        placeholder=\"OR paste the image URL address\" size=\"30\" name=\"myPicture\"></input>\r\n              </div> */}\r\n                <Container myPicture={this.state.myPicture}/>   \r\n               {/* <OriginalImage myPicture={this.state.myPicture}/>     */}\r\n              \r\n      </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}